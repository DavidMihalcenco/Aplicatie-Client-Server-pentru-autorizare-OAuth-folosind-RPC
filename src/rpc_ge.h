/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _RPC_GE_H_RPCGEN
#define _RPC_GE_H_RPCGEN

#include <rpc/rpc.h>

#define NR_CLIENTS_DATABASE 10
#define LINE_SIZE 50
#define SUBLINE_SIZE 20
#define TOKENS_SIZE 15
#define ERROR_SIZE 10
#define FILENAME_SIZE 256
#define SIGNED_TOKEN_SIZE 25
#define RESULT_SIZE 40
#define PERMISSIONS_SIZE 6

#ifdef __cplusplus
extern "C" {
#endif

typedef struct allSources {
	char *name; // Numele sursei , mai jos toate permisiunile 
	int insert;
	int modify;
	int execute;
	int read;
	int delete;
}allSour;

typedef struct userStructure {
	char *userId; // Id-ul Clientului
	char *authToken; // Tokenul de autentificare
	char *refreshToken; // Tokenul de Refresh
	char *access_token; // Tokenul de acces
	int valability; // Valabilitatea
	int refresh; // Daca se face refresh sau nu
	allSour *sources; // Toate sursele si permisiunile care le are clientul
}userStruct;

struct AccessRequest {
	char *user_id;
	char *authorization_token;
	int refresh;
	int valabil;
};
typedef struct AccessRequest AccessRequest;

struct AccessResponse {
	char *response_type;
	char *access_token;
	char *refresh_token;
	int validity_period;
};
typedef struct AccessResponse AccessResponse;

struct DelegatedActionRequest {
	char *action;
	char *resource;
	char *access_token;
	int autoRefresh;
};
typedef struct DelegatedActionRequest DelegatedActionRequest;

struct DelegatedActionResponse {
	char *response;
	char *new_acc_token;
	char *new_refr_token;
};
typedef struct DelegatedActionResponse DelegatedActionResponse;

#define OauthAuthorization 1
#define OauthVersion 1

#if defined(__STDC__) || defined(__cplusplus)
#define request_authorization 1
extern  char ** request_authorization_1(char **, CLIENT *);
extern  char ** request_authorization_1_svc(char **, struct svc_req *);
#define request_token 2
extern  AccessResponse * request_token_1(AccessRequest *, CLIENT *);
extern  AccessResponse * request_token_1_svc(AccessRequest *, struct svc_req *);
#define validate_action 3
extern  DelegatedActionResponse * validate_action_1(DelegatedActionRequest *, CLIENT *);
extern  DelegatedActionResponse * validate_action_1_svc(DelegatedActionRequest *, struct svc_req *);
#define approve_token 4
extern  char ** approve_token_1(char **, CLIENT *);
extern  char ** approve_token_1_svc(char **, struct svc_req *);
extern int oauthauthorization_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define request_authorization 1
extern  char ** request_authorization_1();
extern  char ** request_authorization_1_svc();
#define request_token 2
extern  AccessResponse * request_token_1();
extern  AccessResponse * request_token_1_svc();
#define validate_action 3
extern  DelegatedActionResponse * validate_action_1();
extern  DelegatedActionResponse * validate_action_1_svc();
#define approve_token 4
extern  char ** approve_token_1();
extern  char ** approve_token_1_svc();
extern int oauthauthorization_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_AccessRequest (XDR *, AccessRequest*);
extern  bool_t xdr_AccessResponse (XDR *, AccessResponse*);
extern  bool_t xdr_DelegatedActionRequest (XDR *, DelegatedActionRequest*);
extern  bool_t xdr_DelegatedActionResponse (XDR *, DelegatedActionResponse*);

#else /* K&R C */
extern bool_t xdr_AccessRequest ();
extern bool_t xdr_AccessResponse ();
extern bool_t xdr_DelegatedActionRequest ();
extern bool_t xdr_DelegatedActionResponse ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_RPC_GE_H_RPCGEN */
